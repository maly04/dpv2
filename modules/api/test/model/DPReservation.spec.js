/**
 * Direct Portal REST API
 * The Direct Portal REST API
 *
 * OpenAPI spec version: v1
 * Contact: info@direct-portal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DirectPortalRestApi);
  }
}(this, function(expect, DirectPortalRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DirectPortalRestApi.DPReservation();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DPReservation', function() {
    it('should create an instance of DPReservation', function() {
      // uncomment below and update the code to test DPReservation
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be.a(DirectPortalRestApi.DPReservation);
    });

    it('should have the property saleID (base name: "SaleID")', function() {
      // uncomment below and update the code to test the property saleID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property sale (base name: "Sale")', function() {
      // uncomment below and update the code to test the property sale
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property ownershipType (base name: "OwnershipType")', function() {
      // uncomment below and update the code to test the property ownershipType
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property ownershipTypeID (base name: "OwnershipTypeID")', function() {
      // uncomment below and update the code to test the property ownershipTypeID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property salesPersonID (base name: "SalesPersonID")', function() {
      // uncomment below and update the code to test the property salesPersonID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property salesPerson (base name: "SalesPerson")', function() {
      // uncomment below and update the code to test the property salesPerson
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property salesPersonCommission (base name: "SalesPersonCommission")', function() {
      // uncomment below and update the code to test the property salesPersonCommission
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property salesPersonCommissionComment (base name: "SalesPersonCommissionComment")', function() {
      // uncomment below and update the code to test the property salesPersonCommissionComment
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property generalRemark (base name: "GeneralRemark")', function() {
      // uncomment below and update the code to test the property generalRemark
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property typeID (base name: "TypeID")', function() {
      // uncomment below and update the code to test the property typeID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property agency (base name: "Agency")', function() {
      // uncomment below and update the code to test the property agency
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property agencyID (base name: "AgencyID")', function() {
      // uncomment below and update the code to test the property agencyID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property agencyCommission (base name: "AgencyCommission")', function() {
      // uncomment below and update the code to test the property agencyCommission
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property agencyCommissionComment (base name: "AgencyCommissionComment")', function() {
      // uncomment below and update the code to test the property agencyCommissionComment
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property at (base name: "At")', function() {
      // uncomment below and update the code to test the property at
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property dateOfReservation (base name: "DateOfReservation")', function() {
      // uncomment below and update the code to test the property dateOfReservation
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property dateOfContract (base name: "DateOfContract")', function() {
      // uncomment below and update the code to test the property dateOfContract
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property unitID (base name: "UnitID")', function() {
      // uncomment below and update the code to test the property unitID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property unit (base name: "Unit")', function() {
      // uncomment below and update the code to test the property unit
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property contractDetails (base name: "ContractDetails")', function() {
      // uncomment below and update the code to test the property contractDetails
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property relationships (base name: "Relationships")', function() {
      // uncomment below and update the code to test the property relationships
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property salesRequests (base name: "SalesRequests")', function() {
      // uncomment below and update the code to test the property salesRequests
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property deposit (base name: "Deposit")', function() {
      // uncomment below and update the code to test the property deposit
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property onContract (base name: "OnContract")', function() {
      // uncomment below and update the code to test the property onContract
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property installments (base name: "Installments")', function() {
      // uncomment below and update the code to test the property installments
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property onKey (base name: "OnKey")', function() {
      // uncomment below and update the code to test the property onKey
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property transferPercentage (base name: "TransferPercentage")', function() {
      // uncomment below and update the code to test the property transferPercentage
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
      // uncomment below and update the code to test the property paymentMethod
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethodID (base name: "PaymentMethodID")', function() {
      // uncomment below and update the code to test the property paymentMethodID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property statusType (base name: "StatusType")', function() {
      // uncomment below and update the code to test the property statusType
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property created (base name: "Created")', function() {
      // uncomment below and update the code to test the property created
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "Modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property createdById (base name: "CreatedById")', function() {
      // uncomment below and update the code to test the property createdById
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "CreatedBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property modifiedById (base name: "ModifiedById")', function() {
      // uncomment below and update the code to test the property modifiedById
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property modifiedBy (base name: "ModifiedBy")', function() {
      // uncomment below and update the code to test the property modifiedBy
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property ID (base name: "ID")', function() {
      // uncomment below and update the code to test the property ID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "Description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property active (base name: "Active")', function() {
      // uncomment below and update the code to test the property active
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property _default (base name: "Default")', function() {
      // uncomment below and update the code to test the property _default
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property migrationID (base name: "MigrationID")', function() {
      // uncomment below and update the code to test the property migrationID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "Color")', function() {
      // uncomment below and update the code to test the property color
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionID (base name: "SubscriptionID")', function() {
      // uncomment below and update the code to test the property subscriptionID
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

    it('should have the property subscription (base name: "Subscription")', function() {
      // uncomment below and update the code to test the property subscription
      //var instane = new DirectPortalRestApi.DPReservation();
      //expect(instance).to.be();
    });

  });

}));
